---
title: "Online Data"
author: "Kerry Back"
date: "2025-05-05"
categories: ["Finance", "Python Tools"]
image: "online.png"  # You can add an image later
---

![](online.png){width=40% fig-align="center"}

We can upload files to Julius as with other chatbots.  We can then chat about the data with the benefit of python.  In fact, Julius.ai started life as the "Chat with Your Data" plug-in for ChatGPT.  However, Julius can also grab online data.  Computing stock returns from [Yahoo Finance](https://finance.yahoo.com/) data is a good place to start.  The yfinance library is the best python library for accessing Yahoo Finance.   The data begins in 1970.  To get the longest possible history for a ticker, we can ask Julius to get data starting in 1970.  We can specify other dates, and we can also specify the frequency of the data - daily, weekly, monthly, quarterly, annual.   

Yahoo Finance computes dividend and split adjusted closing prices.  We can compute total close-to-close returns, including dividend returns, as percent changes of the adjusted closing prices.^[There is a slight caveat that the percent change of the adjusted closing price on an ex-dividend day takes the dividend out of the denominator of the price ratio rather than adding it to the numerator, but, given typical quarterly dividend yields, this has a negligible effect.  Percent changes of adjusted closing prices on all days other than ex-dividend days equal percent changes in split-adjusted closing prices.]  The yfinance library recently changed to returning the adjusted prices by default rather than returning standard (split-adjusted) prices.  The confusing part is that it now calls the adjusted prices returned by default "Close" rather than the former "Adj Close."  I recommend prompting the LLM to use the latest version of yfinance and explicitly prompting the LLM to get the "Close" instead of "Adj Close.^[An additional reason for updating yfinance is is that older versions (verions as recent as 0.2.54) have recently been returning "rate limit" errors.  Remind Julius to upgrade yfinance if you encounter that.]"  

A more complex but also more transparent solution to the Close/Adj Close confusion is to prompt the LLM to use the yfinance download function with auto_adjust set to False (this was the old behavior) and to get both the "Close" and "Adj Close."  Percent changes in "Adj Close" are what we want for returns.  To show students the difference between the two, we can ask for percent changes in both and then filter to dates where the percent changes differ by more than 0.00001 or so.  Those dates will be the ex-dividend days.  The difference between the two percent changes on those days is the quarterly dividend yield.

[FRED](https://fred.stlouisfed.org/) (Federal Reserve Economic Data) is a standard source for macroeconomic data, including GDP, exchange rates, Treasury and corporate bond yields, crude oil prices, etc.  The pandas-datareader library is the best python library for accessing FRED.  We can go to the FRED website and find the data we want, but Julius is quicker.  For example, "get the history of 10-year Treasury yields from FRED using pandas-datareader at a daily frequency and plot them."  In subsequent posts, we'll explore other online data, including Ken French's data library and the SEC EDGAR site.

Of course, an alternative to using online data is to provide data to students.  For example, we can give them CRSP data instead of using Yahoo Finance.  They will then need to upload the CRSP data to Julius.  There is a way to make large CRSP/Compustat datasets available to students while uploading only a subset of the data to Julius.  This is useful because we may want to look at different tickers or different time periods or different variables in different analyses, but uploading a large dataset into Julius can be slow.  Here are the steps I follow (please share alternatives in the comments below).

1.  Download the dataset from CRSP or Compustat or wherever and save it as a csv file in Dropbox.
2.  Copy the Dropbox link to the csv file.  Change the last symbol of the URL from 0 to 1 (dl = 0 at the end of the URL means "direct link = False;" dl = 1 means "direct link = True", which is what we want).  Share the revised URL with students.
3.  Tell students to ask Julius to install the python library duckdb and to read only the part of the data they want from the csv file at the URL.  For example, they can say "use duckdb to read only the WMT returns."

Duckdb uses SQL syntax to read the file.  We get the convenience of SQL  (you don't need to read the entire file into memory) without having to create a SQL database.  

---

*Also on substack at [kerryback.substack.com](https://kerryback.substack.com)*