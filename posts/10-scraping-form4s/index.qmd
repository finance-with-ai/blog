---
title: "Scraping Form 4's"
author: "Kerry Back"
date: "2025-05-13"
draft: true
categories: ["Finance"]
image: "form4s.png"  # You can add an image later
---

![](form4s.png){width=40% fig-align="center"}

This spring, while Tesla was in the midst of a 50% freefall, the news media reported that Tesla insiders had been selling shares.  Here, "insiders" means individuals required to file a Form 4 with the SEC when they trade: directors, officers, and owners of very large stakes (more than 10% of outstanding shares).  This was a good motivation for beginning to look at scraping the SEC EDGAR site.  I will look at scraping corporate financial statements in a later post.  Financial statements are complicated, because there are different levels of aggregation of reported items that can be applied.  Form 4's are more straightforward.  

It's useful to work through finding Form 4's manually before explaining how to automate it with AI.  Starting at the [EDGAR home page](https://www.sec.gov/search-filings), we can type "Tesla" in the search window, which brings up a dropdown menu showing 15 companies with "Tesla" in their names, some of which are probably subsidiaries.  The ticker TSLA appears beside the name Tesla, Inc., so it is the one we want.  The menu also shows the CIK (Central Index Key) which is the ID used for a company throughout EDGAR.  Selecting TSLA from this menu brings us to the homepage for TSLA on EDGAR.  Selecting "View Filings" here brings us to a page that lists TSLA filings.  We want to choose "Insider Transactions" from the dropdown menu at the top left.  That brings us to a page listing Form 4's, reverse ordered by date. 

There are two ways to select an individual Form 4 from the Insider Transactions page.  The link "Statement of changes in beneficial ownership of securities" will open the Form 4 in our browser.  Beside that link is another link in a text box labeled "View Filing."  Clicking it brings up a page titled "Filing Detail."  The important part of that page is the section titled "Document Format Files."  I will use the TSLA filing that was filed on 2025-05-08 with a recording date of 2025-05-06 as an example for concreteness, but you should find the same format for any other filing.  The Document Format Files section has three lines.  Each of the first two lines includes a link with the name "tm2514194-1_4seq1."  In the first line, the name has the extension ".html" and in the second it has the extension ".xml."  The .html link will bring us to the same view of the Form 4 in our browser that we would have obtained with the "Statement of changes in beneficial ownership of securities" link.  The .xml link brings up a page that contains the Form 4 data, but it is embedded in a lot of code and is difficult to parse.

The purpose of this detailed description of the EDGAR Form 4 data is to show that Form 4's are stored on EDGAR in two different formats: HTML and XML.  HTML (Hypertext Markup Language) is code that a browser interprets and displays in a manner easy for people to read.  XML (Extensible Markup Language) is code that is written in a manner easy for machines to read.  

At this point, I find it useful to explain to students the differences in how people and machines read HTML.  This has to be explained at some point if general web scraping is to be discussed, andmy experience is that students often have zero understanding of how web browsers work.  I go to the page that the .html link brought up, right click and select "View Page Source" from the dropdown menu.  This brings up the HTML source code that the browser interprets to display the page that people read.  This appears to be a revelation to most of my students, which has surprised me, but perhaps that's because HTML was invented and was a subject of curiosity during my working years.  

Here, I explain that when we use python web scraping tools (which we do later in my course), our machines read the source code.  The machines have to parse the data we want form all of the surrounding HTML code.  Thus, what is easy for us to read in our browsers can be difficult for machines to read.  On the other hand, XML is difficult for us to read, but is much easier for machines to read, because it doesn't include all the code that serves only to prettify the display for us.  



---

*First published on [finance-with-ai.org](https://finance-with-ai.org)* 