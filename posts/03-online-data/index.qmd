---
title: "Online Data and Visualization"
author: "Kerry Back"
date: "2025-04-02"
categories: ["Finance"]
image: "spy-returns.jpg"  # You can add an image later
---

![](spy-returns.jpg){width=30% fig-align="center"}

Grabbing and visualizing online data is a good place to start to demonstrate to students the power and simplicity of AI + python.  Yahoo Finance is a good source of free online data about stock and option prices and corporate financial statements.  The yfinance library is the best python library for retrieving it.  FRED (Federal Reserve Economic Data) is a great source for macroeconomic data, including Treasury and corporate bond yields, crude oil prices, etc.  The pandas-datareader library is the best python library for retrieving it.  Neither yfinance nor pandas-datareader requires you to obtain an API key.  Computing stock returns with yfinance is a good starting point.

Yahoo Finance computes dividend and split adjusted closing prices.  We can compute total close-to-close returns, including dividend returns, as percent changes of the adjusted closing prices.^[There is a slight caveat that the percent change on an ex-dividend day $t$ is $P_t/(P_{t-1} - D_t) - 1$ rather than the $(P_t+D_t)/P_{t-1} - 1$ that we would normally compute, but, given typical quarterly dividend yields, the difference between these numbers is slight.  Percent changes on all days other than ex-dividend days are the usual returns $P_t/P_{t-1} - 1$, where $P$ is the split-adjusted price.]  The yfinance library recently changed its default behavior regarding whether to return these adjusted prices rather than standard (split-adjusted) prices.  This is reasonable, because that is usually what we want.  But, it returns these adjusted prices with the name "Close" rather the previous "Adj Close."  This can cause the LLM to get somewhat confused.  I recommend asking Julius explicitly to use yfinance 0.2.54 (or a later version) and get the "Close" instead of "Adj Close."  However, if you omit this, the worst that is likely to happen is that Julius will look for "Adj Close" and not find it, generating an error, and will then analyze the error and fix it after a couple of tries, giving you the adjusted closing prices you want.

The Yahoo Finance data starts in 1970.  To get the longest possible history for a ticker, you can ask it to start in 1970.  You can specify other dates and you can specify the frequency of the data - daily, weekly, monthly, quarterly, annual.  After computing returns, students can go immediately to creating charts.  Python has very versatile plotting libraries.  The LLM will default to matplotlib or seaborn, depending on what type of chart you ask for.  You can ask Julius to adjust the figure size, font sizes, tick locations, tick labels, axis labels, title, legend positioning, and more.  Figures can be saved and downloaded as jpegs, pngs, pdfs, or other types.  Different themes can also be applied -- gridded or not gridded, light or dark background, etc.  Rather than attempting to teach all of these possibilities, I recommend encouraging students to ask Julius what is possible.  They should get in the habit of turning to AI for advice, collaboration, and assistance in whatever task they are doing.

After exploring stock returns with yfinance, I turn to exploring FRED data using pandas-datareader.  Students can start by going to the FRED website and using point-and-click to find data and download it as csv files.  Then, they can turn to Julius to do the same thing more quickly.  For example, "get me the history of 10-year Treasury yields from FRED using pandas-datareader at a daily frequency and plot them."  There are alternate ways of getting the FRED data: there are other FRED-specific python libraries and there is the generic requests library.  But pandas-datareader provides the easiest access.  In subsequent posts, we'll explore Ken French's data library, the SEC EDGAR site, and scraping data from websites using the requests and beautifulsoup libraries.