---
title: "Simulation"
author: "Kerry Back"
date: "2025-05-09"
categories: ["Finance"]
draft: false
image: "monte-carlo.png"  # You can add an image later
---

![](monte-carlo.png){width=40% fig-align="center"}

Simulation and optimization can be done in spreadsheets but are better done elsewhere.  I illustrate the AI + coding approach by simulating retirement plans and doing mean-variance optimization.

A simple retirement plan specifies an initial account balance, the number of years and the amount to be saved each year until retirement, the number of years and the amount to be withdrawn each year after retirement, and an investment return each year.  We can bypass worrying about inflation by doing everything in real terms: the deposits and withdrawals should be specified in today's dollars, and the investment return should be the real rate of return.  Taxes are complicated and important.  It would certainly be feasible to do a detailed analysis of taxes for different investment vehicles (along the lines of [this](https://learn-investments.rice-business.org/taxes/tax_vehicles)), but, since teaching personal finance is not my real goal, I just tell students to think of the deposits and withdrawals as being pre-tax, as in a 401k. 

One way to approach the simulation is to ask for a python function to be created that takes an initial account balance, a list of deposit amounts, a list of withdrawal amounts, and a list of investment returns as inputs and produces a table with four columns: the beginning-of-year balance, the dollar investment gain or loss, the deposit or withdrawal amount, and the end-of-year balance.  The reason for outputting an entire table rather than just end-of-year balances is that it makes it easier to check that the timing and calculations are done correctly.  

We don't have to type the lists that are inputs to the function.  We can say, for example: "The initial balance is $40,000, there will be 30 deposits starting at $5,000 and growing by 4% per year, there will be 25 withdrawals of $100,000 each, and the investment return will be 10% each year. Use the function to calculate the table and show it."   We can do a small example to check that the function is working correctly before running the simulation.  Julius has a [data viewer](https://julius.ai/docs/data-explorer/overview) that makes it easy to examine the results.  We can also ask for the results to be output as an Excel file (which produces a file with only numbers, not formulas).  

Once the function is working correctly, we can ask for a simulation.  For example: "Simulate the investment returns as random draws from a normal distribution with a mean of 10% and a standard deviation of 10%.  Simulate 1,000 lifetimes and retain the terminal account balance for each lifetime."  Then, we can ask for the mean or median of the terminal balances, a histogram, etc.  The histogram is useful because it shows the positive skewness induced by compounding, which will also show up in the mean being larger than the median.  This is a good opportunity to talk about the difference between arithmetic and geometric average returns and the effect of volatility on the difference.

This is a nice example to build into an app.  Everyone needs to do retirement planning, so students may be able to impress friends and family.

---

*First published on [finance-with-ai.org](https://finance-with-ai.org)* 

Mean-variance optimization is one of those topics that was always awkward to teach with spreadsheets.  It is clunky to define the portfolio variance in a spreadsheet for more than two assets, and we are forced to use Solver to find efficient portfolios or to deal with the further clunkiness of matrix inversion in a spreadsheet.    Also, if we create an example for three assets and someone asks about four, then we have to almost entirely reengineer the spreadsheet.  Luckily, the leading models have been trained on enough mean-variance material to know  the formula $\Sigma^{-1}\mu$ and to correctly implement it each time.  For these reasons, mean-variance optimization provides a very nice example to demonstrate the power of AI + python.

If we want to implement constraints or to find the efficient frontier without a risk-free asset, then there are alternate routes the models may take, so it pays to be familiar with those before launching into live demos in class.

