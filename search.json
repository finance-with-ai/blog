[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Teaching AI-Assisted Financial Analysis",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n\n\n\n\n\n\n\n\n\n\nJulius and the Democratization of Coding\n\n\n\nAI tools\n\n\n\n\n\n\n\n\n\nApr 1, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nOnline Data and Visualization\n\n\n\nFinance\n\n\n\n\n\n\n\n\n\nApr 2, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nCAPM and Cost of Equity\n\n\n\nFinance\n\n\n\n\n\n\n\n\n\nApr 3, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nPrompt Engineering (or Not)\n\n\n\nAI Overview\n\n\n\n\n\n\n\n\n\nApr 4, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nBuilding Apps\n\n\n\nPython Tools\n\n\n\n\n\n\n\n\n\nApr 10, 2025\n\n\nKerry Back\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/02-julius/index.html",
    "href": "posts/02-julius/index.html",
    "title": "Julius and the Democratization of Coding",
    "section": "",
    "text": "The world is aware that generative AI has made coders more efficient, but I don’t know if there is as much recognition of the more important fact that gen AI has made coding accessible to non-coders. I expect this to change rapidly by word of mouth: Once exposed to the wonder of coding with gen AI, one cannot help but want to share the word. We can accelerate that change for our students.\nThere are many tools to assist coders with coding, among which Cursor may be the most popular at the moment. The leading chatbots also have “code interpreters” that execute generated code to respond to prompts. But, as of this writing, those interpreters are closed systems. They provide a fixed menu of libraries and do not allow the user to install more. Julius.ai bridges the gap. It is a full-fledged coding environment, allowing the user to install any library he or she wishes. At the same time, it has the ease of use of a chatbot. Also, there is a 50% academic discount available (email team@julius.ai from your university email account and ask for the promo code).\nThe Julius website states that it provides an “intuitive way to analyze and visualize data without having to code, making statistical analysis accessible to everyone.” Democratizing coding is the goal of the Julius developers. However, the focus on statistical analysis understates what Julius has to offer. You can choose to work in either python or R. If you choose python, which I recommend, then you can do anything with Julius that python can do, and python can do pretty much everything. We’ll explore lots of applications in subsequent posts.\nJulius is a wrapper around large language models (LLMs), including the latest models from OpenAI and Anthropic as of this writing. It sends the user’s prompts to the user’s selected LLM with additional context created by the Julius team. If the LLM generates code, Julius’s servers execute it. The user can see the code as it is written and see what the code creates. A benefit of this process is that students learn something about coding in a relatively painless way. The user can also chat with the LLMs one does with chatbots in general, which is an important part of the overall process.\nA valid concern about gen AI coding for non-coders is that an LLM may make a mistake that the user cannot detect. When OpenAI released GPT 3.5 in 2022, it frequently hallucinated. It is natural to worry about hallucination with AI-generated code. One saving grace is that the models have improved tremendously since 2022, and hallucinations are much less common. An equally important consideration is the nature of coding. Hallucinations about facts in coding would be hallucinations about syntax, and incorrect syntax won’t run. Syntax errors certainly happen, but Julius sends the error messages back to the LLM in an iterative manner until, almost always, the syntax is corrected and the program runs. The type of error that usually happens with gen AI coding for non-coders results from the LLM not fully understanding what the user wants. To guard against this, it is important to be explicit in prompts. It is also important to engage in a two-way conversation with the LLM about what you want, what it understands regarding what you want, what it plans to do, and what it did.\nThere are competing products that are certainly worth showing to students, and new products are appearing at a rapid pace. Plus, the leading LLM providers are expanding their services. An example of a competing product is Vizly. It has the same data analysis/visualization focus as Julius. The developers were previously at Plotly, and the default plotting library is plotly, which creates very nice interactive HTML plots (you can also use plotly with Julius). Vizly is worth exploring, but I don’t have a lot of experience with it. Casting the net wider, students should be introduced to Google Colab. It is not a chatbot, but it is a free JupyterLab environment with free AI assistance provided by the latest Google model (Gemini 2.5 as of this writing). You start by opening a new notebook or exploring the introduction to Colab notebook. I recommend starting a notebook by asking the AI to mount your Google Drive. Then you can read and write files from your Google Drive (ask the AI to do that also). You can also save your Jupyter notebook there. Casting the net even wider, I highly recommend Replit. It creates very professional web apps, writing the HTML and CSS to create the user interface along with (usually) python to do the actual work. It also provides a hosting service, so you can deploy your app online with just a few clicks. We’ll explore creating apps with Julius in subsequent posts using the streamlit and gradio libraries in python."
  },
  {
    "objectID": "forthcoming/07-mean-variance/index.html",
    "href": "forthcoming/07-mean-variance/index.html",
    "title": "Mean-Variance Optimization",
    "section": "",
    "text": "Mean-variance optimization is one of those topics that was always awkward to teach with spreadsheets. It is clunky to define the portfolio variance in a spreadsheet for more than two assets, and we are forced to use Solver to find efficient portfolios or to deal with the further clunkiness of matrix inversion in a spreadsheet. Also, if we create an example for three assets and someone asks about four, then we have to almost entirely reengineer the spreadsheet. Luckily, the leading models have been trained on enough mean-variance material to know the formula \\(\\Sigma^{-1}\\mu\\) and to correctly implement it each time. For these reasons, mean-variance optimization provides a very nice example to demonstrate the power of AI + python.\nIf we want to implement constraints or to find the efficient frontier without a risk-free asset, then there are alternate routes the models may take, so it pays to be familiar with those before launching into live demos in class."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Welcome",
    "section": "",
    "text": "My goal for this site is to communicate things I’ve learned about teaching MBA students at Rice University how to do financial analyses with “AI + coding” and more broadly how generative AI can and is being used in the finance industry. The site is intended to be a resource for finance instructors at the undergraduate, MBA, and MSF levels.\nThe current effectiveness of AI + coding varies somewhat between corporate finance and investments applications. Here, I lump fundamental security analysis in with corporate finance, due to its similarity to capital budgeting. There are many topics in investments for which spreadsheet programs were never well equipped and for which spreadsheet programs are seldom used in practice. Previously, it was difficult to teach those topics by example, but now students can prompt an LLM to generate code for them.\nEven in capital budgeting, financial analysis, and pro forma financial valuation, AI is already very valuable. It is not ready to replace spreadsheets, but it can be a useful complement to spreadsheets. AI can be used as a collaborator – “tell me how you would do this” or “you do it your way, and I’ll do it my way, and then we can compare answers.” As the models improve, I expect the world to shift more and more to AI in lieu of spreadsheets even for these corporate finance applications. Of course, Hewlett-Packard is still making the 12C financial calculator, and Microsoft will undoubtedly sell Excel for many years to come, but I think AI + coding will eventually be dominant. To prepare our students for this world, we should start teaching them now about what is likely to lie ahead.\nWe all face a difficult job keeping up in this rapidly evolving environment. I hope this site can make that somewhat easier. I would be happy to host guest bloggers or to link content from others to make this a shared resource."
  }
]