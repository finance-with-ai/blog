[
  {
    "objectID": "welcome.html",
    "href": "welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "My goal for this site is to communicate things I’ve learned about teaching MBA students at Rice University how to do financial analyses using “AI + coding” and more broadly how generative AI can and is being used in the finance industry. I am posting short notes on what I’ve learned about teaching this material. The site is intended to be a resource for finance instructors at the undergraduate, MBA, and MSF levels. The link above is to the materials for the six-week MBA course I taught in Spring 2025. The course is certainly not optimal. It was developed “just in time” and substantially redesigned on the fly. Nevertheless, it seemed to work reasonably well, so I offer it as a possible starting point for people who may want to teach this topic but have not yet done so.\nThe current effectiveness of AI + coding varies somewhat between corporate finance and investments applications. Here, I lump fundamental security analysis with corporate finance, due to its similarity to capital budgeting. There are many topics in investments for which spreadsheets were never well equipped and for which spreadsheets are seldom used in practice. Previously, it was difficult to teach those topics by example, but now students can prompt an LLM to generate code for them.\nEven in capital budgeting, financial statement analysis, and pro forma financial valuation, AI is already very valuable. It is not yet ready to replace spreadsheets, but it can be a useful complement to spreadsheets. AI can be used as a collaborator – “tell me how you would do this” or “you do it your way, and I’ll do it my way, and then we can compare answers.” As the models improve, I expect the world to shift more and more to AI in lieu of spreadsheets even for corporate finance applications. Of course, Hewlett-Packard is still making the 12C financial calculator, and Microsoft will undoubtedly sell Excel for many years to come, but I think AI + coding will eventually dominate. To prepare our students for this world, we should start teaching them now about what is likely to lie ahead.\nWe all face a difficult job keeping up in this rapidly evolving environment. I hope this site can make that somewhat easier. I would be happy to host guest bloggers or to link content from others to make this a shared resource. Post a comment below to share your views."
  },
  {
    "objectID": "welcome.html#about-this-blog",
    "href": "welcome.html#about-this-blog",
    "title": "Welcome",
    "section": "",
    "text": "My goal for this site is to communicate things I’ve learned about teaching MBA students at Rice University how to do financial analyses using “AI + coding” and more broadly how generative AI can and is being used in the finance industry. I am posting short notes on what I’ve learned about teaching this material. The site is intended to be a resource for finance instructors at the undergraduate, MBA, and MSF levels. The link above is to the materials for the six-week MBA course I taught in Spring 2025. The course is certainly not optimal. It was developed “just in time” and substantially redesigned on the fly. Nevertheless, it seemed to work reasonably well, so I offer it as a possible starting point for people who may want to teach this topic but have not yet done so.\nThe current effectiveness of AI + coding varies somewhat between corporate finance and investments applications. Here, I lump fundamental security analysis with corporate finance, due to its similarity to capital budgeting. There are many topics in investments for which spreadsheets were never well equipped and for which spreadsheets are seldom used in practice. Previously, it was difficult to teach those topics by example, but now students can prompt an LLM to generate code for them.\nEven in capital budgeting, financial statement analysis, and pro forma financial valuation, AI is already very valuable. It is not yet ready to replace spreadsheets, but it can be a useful complement to spreadsheets. AI can be used as a collaborator – “tell me how you would do this” or “you do it your way, and I’ll do it my way, and then we can compare answers.” As the models improve, I expect the world to shift more and more to AI in lieu of spreadsheets even for corporate finance applications. Of course, Hewlett-Packard is still making the 12C financial calculator, and Microsoft will undoubtedly sell Excel for many years to come, but I think AI + coding will eventually dominate. To prepare our students for this world, we should start teaching them now about what is likely to lie ahead.\nWe all face a difficult job keeping up in this rapidly evolving environment. I hope this site can make that somewhat easier. I would be happy to host guest bloggers or to link content from others to make this a shared resource. Post a comment below to share your views."
  },
  {
    "objectID": "welcome.html#about-me",
    "href": "welcome.html#about-me",
    "title": "Welcome",
    "section": "About Me",
    "text": "About Me\nI am Kerry Back, J. Howard Creekmore Professor of Finance and Professor of Economics at Rice University."
  },
  {
    "objectID": "posts/02-julius/index.html",
    "href": "posts/02-julius/index.html",
    "title": "Julius and the Democratization of Coding",
    "section": "",
    "text": "The world is aware that generative AI has made coders more efficient, but I don’t know if there is as much recognition of the more important fact that gen AI has made coding accessible to non-coders. I expect this to change rapidly by word of mouth: Once exposed to the wonder of coding with gen AI, one cannot help but want to share the word. We can accelerate that change for our students.\nThere are many tools to assist coders with coding, among which Cursor may be the most popular at the moment. The leading chatbots also have “code interpreters” that execute generated code to respond to prompts. But, as of this writing, those interpreters are closed systems. They provide a fixed menu of libraries and do not allow the user to install more. Julius.ai bridges the gap. It is a full-fledged coding environment, allowing the user to install any library he or she wishes. At the same time, it has the ease of use of a chatbot. Also, there is a 50% academic discount available (email team@julius.ai from your university email account and ask for the promo code).\nThe Julius website states that it provides an “intuitive way to analyze and visualize data without having to code, making statistical analysis accessible to everyone.” Democratizing coding is the goal of the Julius developers. However, the focus on statistical analysis understates what Julius has to offer. You can choose to work in either python or R. If you choose python, which I recommend, then you can do anything with Julius that python can do, and python can do pretty much everything. We’ll explore lots of applications in subsequent posts.\nJulius is a wrapper around large language models (LLMs), including the latest models from OpenAI and Anthropic as of this writing. Julius sends the user’s prompts to the user’s selected LLM (the general consensus in the blogosphere is that the Anthropic models Claude 3.5 and Claude 3.7 are the best coders available at this time) with additional context created by the Julius developers. If the LLM generates code, Julius’s servers execute it. The user can see the code as it is written and see what the code creates. The chat is very informative, telling the user what the plan is before the code is generated and then interpreting and explaining the results afterwards. A benefit of this process is that students learn something about coding in a relatively painless way.\nA valid concern about gen AI coding for non-coders is that an LLM may make a mistake that the user cannot detect. When OpenAI released GPT 3.5 in 2022, it frequently hallucinated. It is natural to worry about hallucination with AI-generated code. One saving grace is that the models have improved tremendously since 2022, and hallucinations are much less common. An equally important consideration is the nature of coding. Hallucinations about facts in coding would be hallucinations about syntax, and incorrect syntax won’t run. Syntax errors certainly happen, but Julius sends the error messages back to the LLM in an iterative manner until, almost always, the syntax is corrected and the program runs. The type of error that usually happens with gen AI coding for non-coders results from the LLM not fully understanding what the user wants. To guard against this, it is important to be explicit in prompts. It is also important to engage in a two-way conversation with the LLM about what you want, what it understands regarding what you want, what it plans to do, and what it did.\nThere are competing products that are certainly worth showing to students, and new products are appearing at a rapid pace. Plus, the leading LLM providers are expanding their services. An example of a competing product is Vizly. It has the same data analysis/visualization focus as Julius. The developers were previously at Plotly, and the default plotting library is plotly, which creates very nice interactive HTML plots (you can also use plotly with Julius). Vizly is worth exploring, but I don’t have a lot of experience with it. Casting the net wider, students should be introduced to Google Colab. It is not a chatbot, but it is a free JupyterLab environment with free AI assistance provided by the latest Google model (Gemini 2.5 as of this writing). You start by opening a new notebook or exploring the introduction to Colab notebook. I recommend starting a notebook by asking the AI to mount your Google Drive. Then you can read and write files from your Google Drive (ask the AI to do that also). You can also save your Jupyter notebook there. Casting the net even wider, I highly recommend Replit. It creates very professional web apps, writing the HTML and CSS to create the user interface along with (usually) python to do the actual work. It also provides a hosting service, so you can deploy your app online with just a few clicks. We’ll explore creating apps with Julius in subsequent posts using the python streamlit and gradio libraries.\nThere are many more AI + coding tools out there. Please share your favorites in the comments below."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Teaching AI-Assisted Financial Analysis",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n\n\n\n\n\n\n\n\n\n\nJulius and the Democratization of Coding\n\n\n\nAI tools\n\n\n\n\n\n\n\n\n\nMay 4, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nOnline Data and Visualization\n\n\n\nFinance\n\n\n\n\n\n\n\n\n\nMay 5, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nCAPM and Cost of Equity\n\n\n\nFinance\n\n\n\n\n\n\n\n\n\nMay 6, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nPrompt Engineering (or Not)\n\n\n\nAI Overview\n\n\n\n\n\n\n\n\n\nMay 7, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nBuilding Apps\n\n\n\nPython Tools\n\n\n\n\n\n\n\n\n\nMay 8, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nSimulating Retirement Plans\n\n\n\nFinance\n\n\n\n\n\n\n\n\n\nMay 9, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nMean-Variance Optimization\n\n\n\nFinance\n\n\n\n\n\n\n\n\n\nMay 10, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nFama-French Model\n\n\n\nFinance\n\n\n\n\n\n\n\n\n\nMay 11, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nMutual Fund Performance Evaluation\n\n\n\nFinance\n\n\n\n\n\n\n\n\n\nMay 12, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nCapital Budgeting\n\n\n\nFinance\n\n\n\n\n\n\n\n\n\nMay 13, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nPro Formas and Valuation\n\n\n\nFinance\n\n\n\n\n\n\n\n\n\nMay 14, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nFinancial Ratios\n\n\n\n\n\n\n\n\n\n\n\nMay 15, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nWeb Scraping\n\n\n\nPython Tools\n\n\n\n\n\n\n\n\n\nMay 16, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nScraping EDGAR\n\n\n\nFinance\n\nPython Tools\n\n\n\n\n\n\n\n\n\nMay 17, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nApps with API Calls\n\n\n\nAI Overview\n\n\n\n\n\n\n\n\n\nMay 18, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nVector Embeddings\n\n\n\nAI Overview\n\n\n\n\n\n\n\n\n\nMay 19, 2025\n\n\nKerry Back\n\n\n\n\n\n\n\n\n\n\n\n\nRetrieval Augmented Generation\n\n\n\nAI Overview\n\n\n\n\n\n\n\n\n\nMay 20, 2025\n\n\nKerry Back\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/03-online-data/index.html",
    "href": "posts/03-online-data/index.html",
    "title": "Online Data and Visualization",
    "section": "",
    "text": "Grabbing and visualizing online data is a good place to start to demonstrate to students the power and simplicity of AI + python. Yahoo Finance is a good source of free online data about stock and option prices and corporate financial statements. The yfinance library is the best python library for retrieving it. FRED (Federal Reserve Economic Data) is a great source for macroeconomic data, including Treasury and corporate bond yields, crude oil prices, etc. The pandas-datareader library is the best python library for accessing FRED. Neither yfinance nor pandas-datareader requires you to obtain an API key.\nComputing stock returns with yfinance is a good starting point. Yahoo Finance computes dividend and split adjusted closing prices. We can compute total close-to-close returns, including dividend returns, as percent changes of the adjusted closing prices.1 The yfinance library recently changed to returning the adjusted prices by default rather than returning standard (split-adjusted) prices. The confusing part is that it now calls the adjusted prices returned by default “Close” rather than the former “Adj Close.” I recommend prompting the LLM to use yfinance 0.2.54 (or a later version) and explicitly saying to get the “Close” instead of “Adj Close.”\nA more complex but also more transparent solution to the Close/Adj Close confusion is to prompt the LLM to use the yfinance download function with auto_adjust set to False (this was the old behavior) and to get both the “Close” and “Adj Close.” Percent changes in “Adj Close” are what you want for returns. To show students the difference between the two, you could ask for percent changes in both and then filter to dates where the percent changes differ by \\(10^{-5}\\) or so. Those dates will be the ex-dividend days. The difference between the two percent changes on those days is the quarterly dividend yield.\nThe Yahoo Finance data starts in 1970. To get the longest possible history for a ticker, you can ask it to start in 1970. You can specify other dates and you can specify the frequency of the data - daily, weekly, monthly, quarterly, annual. After computing returns, students can go immediately to creating charts. Python has very versatile plotting libraries. The LLM will default to matplotlib or seaborn, depending on what type of chart you ask for. You can ask Julius to adjust the figure size, font sizes, tick locations, tick labels, axis labels, title, legend positioning, and more. Figures can be saved and downloaded as jpegs, pngs, pdfs, or other types. Different themes can also be applied – gridded or not gridded, light or dark background, etc. Rather than attempting to teach all of these possibilities, I recommend encouraging students to ask Julius what is possible. They should get in the habit of turning to AI for advice, collaboration, and assistance in whatever task they are doing.\nAfter exploring stock returns with yfinance, I turn to exploring FRED data using pandas-datareader. Students can start by going to the FRED website and using point-and-click to find data and download it as csv files. Then, they can turn to Julius to do the same thing more quickly. For example, “get me the history of 10-year Treasury yields from FRED using pandas-datareader at a daily frequency and plot them.” There are alternate ways of getting the FRED data: there are other FRED-specific python libraries and there is the generic requests library. But pandas-datareader provides the easiest access. In subsequent posts, we’ll explore Ken French’s data library, the SEC EDGAR site, and scraping data from websites using the requests and beautiful soup libraries."
  },
  {
    "objectID": "posts/03-online-data/index.html#footnotes",
    "href": "posts/03-online-data/index.html#footnotes",
    "title": "Online Data and Visualization",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThere is a slight caveat that the percent change of the adjusted closing price on an ex-dividend day \\(t\\) is \\(P_t/(P_{t-1} - D_t) - 1\\) rather than the return \\((P_t+D_t)/P_{t-1} - 1\\) that we would normally compute, but, given typical quarterly dividend yields, the difference between these numbers is slight. Percent changes of adjusted closing prices on all days other than ex-dividend days equal percent changes in split-adjusted closing prices.↩︎"
  },
  {
    "objectID": "posts/07-mean-variance/index.html",
    "href": "posts/07-mean-variance/index.html",
    "title": "Mean-Variance Optimization",
    "section": "",
    "text": "Mean-variance optimization is one of those topics that was always awkward to teach with spreadsheets. It is clunky to define the portfolio variance in a spreadsheet for more than two assets, and we are forced to use Solver to find efficient portfolios or to deal with the further clunkiness of matrix inversion in a spreadsheet. Also, if we create an example for three assets and someone asks about four, then we have to almost entirely reengineer the spreadsheet. Luckily, the leading models have been trained on enough mean-variance material to know the formula \\(\\Sigma^{-1}\\mu\\) and to correctly implement it each time. For these reasons, mean-variance optimization provides a very nice example to demonstrate the power of AI + python.\nIf we want to implement constraints or to find the efficient frontier without a risk-free asset, then there are alternate routes the models may take, so it pays to be familiar with those before launching into live demos in class."
  }
]